A[3][
    X :: x : A + B |- case(x, lambda y : A. inr(y), lambda z : B. inl(z)) : B + A in Lambda since
        case(x, lambda y : A. inr(y), lambda z : B. inl(z)) : B + A by case {
            x : A + B by var {
                X
            };
            (Y :: y : A)[
                inr(y) : B + A by inr {
                    y : A by var {
                        Y
                    }
                }
            ];
            (Z :: z : B)[
                inl(z) : B + A by inl {
                    z : B by var {
                        Z
                    }
                }
            ];
        }
]
